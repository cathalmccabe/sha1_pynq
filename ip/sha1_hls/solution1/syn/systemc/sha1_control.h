// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha1_control_HH_
#define _sha1_control_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sha1_control_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct sha1_control : public sc_module {
    // Port declarations 29
    sc_out< sc_lv<1> > o_cs;
    sc_out< sc_logic > o_cs_ap_vld;
    sc_out< sc_lv<1> > o_we;
    sc_out< sc_logic > o_we_ap_vld;
    sc_out< sc_lv<8> > o_address;
    sc_out< sc_logic > o_address_ap_vld;
    sc_out< sc_lv<32> > o_write;
    sc_out< sc_logic > o_write_ap_vld;
    sc_in< sc_lv<32> > i_read;
    sc_in< sc_lv<1> > i_error;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_signal< sc_logic > ap_var_for_const0;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    sha1_control(sc_module_name name);
    SC_HAS_PROCESS(sha1_control);

    ~sha1_control();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sha1_control_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* sha1_control_AXILiteS_s_axi_U;
    sc_signal< sc_lv<1> > i_cs;
    sc_signal< sc_lv<1> > i_we;
    sc_signal< sc_lv<8> > i_address;
    sc_signal< sc_lv<32> > i_write;
    sc_signal< sc_logic > o_read_ap_vld;
    sc_signal< sc_logic > o_error_ap_vld;
    sc_signal< sc_logic > ap_rst_n_inv;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_rst_n_inv();
    void thread_o_address();
    void thread_o_address_ap_vld();
    void thread_o_cs();
    void thread_o_cs_ap_vld();
    void thread_o_error_ap_vld();
    void thread_o_read_ap_vld();
    void thread_o_we();
    void thread_o_we_ap_vld();
    void thread_o_write();
    void thread_o_write_ap_vld();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
