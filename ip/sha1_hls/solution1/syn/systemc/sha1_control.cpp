// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha1_control.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int sha1_control::C_S_AXI_DATA_WIDTH = "100000";
const sc_logic sha1_control::ap_const_logic_1 = sc_dt::Log_1;
const bool sha1_control::ap_const_boolean_1 = true;
const sc_logic sha1_control::ap_const_logic_0 = sc_dt::Log_0;

sha1_control::sha1_control(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha1_control_AXILiteS_s_axi_U = new sha1_control_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sha1_control_AXILiteS_s_axi_U");
    sha1_control_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sha1_control_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sha1_control_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sha1_control_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sha1_control_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sha1_control_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sha1_control_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sha1_control_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sha1_control_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sha1_control_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sha1_control_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sha1_control_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sha1_control_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sha1_control_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sha1_control_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sha1_control_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sha1_control_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sha1_control_AXILiteS_s_axi_U->ACLK(ap_clk);
    sha1_control_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sha1_control_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sha1_control_AXILiteS_s_axi_U->i_cs(i_cs);
    sha1_control_AXILiteS_s_axi_U->i_we(i_we);
    sha1_control_AXILiteS_s_axi_U->i_address(i_address);
    sha1_control_AXILiteS_s_axi_U->i_write(i_write);
    sha1_control_AXILiteS_s_axi_U->o_read(i_read);
    sha1_control_AXILiteS_s_axi_U->o_read_ap_vld(o_read_ap_vld);
    sha1_control_AXILiteS_s_axi_U->o_error(i_error);
    sha1_control_AXILiteS_s_axi_U->o_error_ap_vld(o_error_ap_vld);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_o_address);
    sensitive << ( i_address );

    SC_METHOD(thread_o_address_ap_vld);

    SC_METHOD(thread_o_cs);
    sensitive << ( i_cs );

    SC_METHOD(thread_o_cs_ap_vld);

    SC_METHOD(thread_o_error_ap_vld);

    SC_METHOD(thread_o_read_ap_vld);

    SC_METHOD(thread_o_we);
    sensitive << ( i_we );

    SC_METHOD(thread_o_we_ap_vld);

    SC_METHOD(thread_o_write);
    sensitive << ( i_write );

    SC_METHOD(thread_o_write_ap_vld);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha1_control_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, o_cs, "(port)o_cs");
    sc_trace(mVcdFile, o_cs_ap_vld, "(port)o_cs_ap_vld");
    sc_trace(mVcdFile, o_we, "(port)o_we");
    sc_trace(mVcdFile, o_we_ap_vld, "(port)o_we_ap_vld");
    sc_trace(mVcdFile, o_address, "(port)o_address");
    sc_trace(mVcdFile, o_address_ap_vld, "(port)o_address_ap_vld");
    sc_trace(mVcdFile, o_write, "(port)o_write");
    sc_trace(mVcdFile, o_write_ap_vld, "(port)o_write_ap_vld");
    sc_trace(mVcdFile, i_read, "(port)i_read");
    sc_trace(mVcdFile, i_error, "(port)i_error");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, i_cs, "i_cs");
    sc_trace(mVcdFile, i_we, "i_we");
    sc_trace(mVcdFile, i_address, "i_address");
    sc_trace(mVcdFile, i_write, "i_write");
    sc_trace(mVcdFile, o_read_ap_vld, "o_read_ap_vld");
    sc_trace(mVcdFile, o_error_ap_vld, "o_error_ap_vld");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
#endif

    }
    mHdltvinHandle.open("sha1_control.hdltvin.dat");
    mHdltvoutHandle.open("sha1_control.hdltvout.dat");
}

sha1_control::~sha1_control() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha1_control_AXILiteS_s_axi_U;
}

void sha1_control::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sha1_control::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sha1_control::thread_o_address() {
    o_address = i_address.read();
}

void sha1_control::thread_o_address_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        o_address_ap_vld = ap_const_logic_1;
    } else {
        o_address_ap_vld = ap_const_logic_0;
    }
}

void sha1_control::thread_o_cs() {
    o_cs = i_cs.read();
}

void sha1_control::thread_o_cs_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        o_cs_ap_vld = ap_const_logic_1;
    } else {
        o_cs_ap_vld = ap_const_logic_0;
    }
}

void sha1_control::thread_o_error_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        o_error_ap_vld = ap_const_logic_1;
    } else {
        o_error_ap_vld = ap_const_logic_0;
    }
}

void sha1_control::thread_o_read_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        o_read_ap_vld = ap_const_logic_1;
    } else {
        o_read_ap_vld = ap_const_logic_0;
    }
}

void sha1_control::thread_o_we() {
    o_we = i_we.read();
}

void sha1_control::thread_o_we_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        o_we_ap_vld = ap_const_logic_1;
    } else {
        o_we_ap_vld = ap_const_logic_0;
    }
}

void sha1_control::thread_o_write() {
    o_write = i_write.read();
}

void sha1_control::thread_o_write_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        o_write_ap_vld = ap_const_logic_1;
    } else {
        o_write_ap_vld = ap_const_logic_0;
    }
}

void sha1_control::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"o_cs\" :  \"" << o_cs.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_cs_ap_vld\" :  \"" << o_cs_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_we\" :  \"" << o_we.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_we_ap_vld\" :  \"" << o_we_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_address\" :  \"" << o_address.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_address_ap_vld\" :  \"" << o_address_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_write\" :  \"" << o_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_write_ap_vld\" :  \"" << o_write_ap_vld.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"i_read\" :  \"" << i_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_error\" :  \"" << i_error.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

